import * as ti from "../taichi";
import { Camera } from "./Camera";
import { Scene } from "./Scene";
export declare class Renderer {
    scene: Scene;
    htmlCanvas: HTMLCanvasElement;
    constructor(scene: Scene, htmlCanvas: HTMLCanvasElement);
    private renderKernel;
    private shadowKernel;
    private depthTexture;
    private canvasTexture;
    private sceneData?;
    private skyboxVBO?;
    private skyboxIBO?;
    private iblLambertianFiltered?;
    private iblGGXFiltered?;
    private LUT?;
    private batchInfos;
    private batchesDrawInfos;
    private batchesDrawInstanceInfos;
    private batchesDrawInfoBuffers;
    private batchesDrawInstanceInfoBuffers;
    private shadowMaps;
    private shadowDrawInfos;
    private shadowDrawInstanceInfos;
    private shadowDrawInfoBuffer?;
    private shadowDrawInstanceInfoBuffer?;
    engine: typeof ti.engine;
    uvToDir: (...args: any[]) => any;
    dirToUV: (...args: any[]) => any;
    tonemap: (...args: any[]) => any;
    characteristic: (...args: any[]) => any;
    ggxDistribution: (...args: any[]) => any;
    init(): Promise<void>;
    computeDrawBatches(): Promise<void>;
    render(camera: Camera): Promise<void>;
}
